# -*- coding: utf-8 -*-
"""
Author: Hung-Hsin Chen <chen1116@gmail.com>

The SPSP CVaR experiments are not able to run in parallel setting(ipyparallel)
because ofthe complex setting of pyomo.
"""

import datetime as dt
import json
import logging
import os
import sys

import numpy as np
import pandas as pd
import xarray as xr

import portfolio_programming as pp
import portfolio_programming.simulation.spsp_cvar


def valid_exp_name(exp_name):
    if exp_name not in ('dissertation', 'stocksp_cor15'):
        raise ValueError('unknown exp_name:{}'.format(exp_name))


def valid_setting(setting):
    if setting not in ("compact", "general"):
        raise ValueError("Unknown SPSP_CVaR setting: {}".format(setting))


def run_SPSP_CVaR(exp_name, setting, group_name, max_portfolio_size,
                  rolling_window_size, n_scenario, alpha,
                  scenario_set_idx, exp_start_date, exp_end_date):
    market = group_name[:2]
    if market == "TW":
        risky_roi_xarr = xr.open_dataarray(pp.TAIEX_2005_MKT_CAP_NC)
    elif market == "US":
        risky_roi_xarr = xr.open_dataarray(pp.DJIA_2005_NC)

    symbols = pp.GROUP_SYMBOLS[group_name]
    if setting in ('compact',):
        candidate_symbols = symbols[:max_portfolio_size]
    else:
        candidate_symbols = symbols

    n_symbol = len(candidate_symbols)
    risky_rois = risky_roi_xarr.loc[exp_start_date:exp_end_date,
                 candidate_symbols, 'simple_roi']

    exp_trans_dates = risky_rois.get_index('trans_date')
    n_exp_dates = len(exp_trans_dates)
    risk_free_rois = xr.DataArray(np.zeros(n_exp_dates),
                                  coords=(exp_trans_dates,))
    initial_risk_wealth = xr.DataArray(np.zeros(n_symbol),
                                       dims=('symbol',),
                                       coords=(candidate_symbols,))
    initial_risk_free_wealth = 1e6
    print(exp_name, setting, exp_start_date, exp_end_date,
          max_portfolio_size, rolling_window_size, n_scenario, alpha)
    instance = portfolio_programming.simulation.spsp_cvar.SPSP_CVaR(
        setting,
        group_name,
        candidate_symbols,
        max_portfolio_size,
        risky_rois,
        risk_free_rois,
        initial_risk_wealth,
        initial_risk_free_wealth,
        start_date=exp_trans_dates[0],
        end_date=exp_trans_dates[-1],
        rolling_window_size=rolling_window_size,
        alpha=alpha,
        n_scenario=n_scenario,
        scenario_set_idx=scenario_set_idx,
        print_interval=10
    )
    instance.run()


def stocksp_cor15_plot_2d_contour_by_alpha(setting, z_dim="cum_roi"):
    """
    The  2 x 5 contour diagrams in the paper are generated by the function
    """

    # verify setting
    if setting not in ("compact", "general"):
        raise ValueError("unknown setting: {}".format(setting))

    # verify z_dim
    if z_dim not in ('cum_roi', 'daily_VSS', 'annual_roi'):
        raise ValueError('unknown z_dim:{}'.format(z_dim))

    # parameters
    start_date, end_date = dt.date(2005, 1, 3), dt.date(2014, 12, 31)
    max_portfolio_sizes = range(5, 50 + 5, 5)
    window_sizes = range(60, 240 + 10, 10)
    alphas = ["{:.2f}".format(v / 100.) for v in range(50, 100, 5)]
    set_indices = [1, 2, 3]

    name = "report_SPSP_CVaR_whole_{}_{}_{}.nc".format(
        setting, start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d"))

    # read report file
    xarr = xr.open_dataarray(open(os.path.join(pp.DATA_DIR, name), 'rb'))

    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # figure size in inches
    fig = plt.figure(figsize=(64, 48), facecolor='white')

    # set color range
    if z_dim == 'cum_roi':
        cm_norm = mpl.colors.Normalize(vmin=-100, vmax=300, clip=False)
        color_range = np.arange(-100, 300 + 10, 20)
    elif z_dim == "daily_VSS":
        cm_norm = mpl.colors.Normalize(vmin=0, vmax=4, clip=False)
        color_range = np.arange(0, 4 + 0.2, 0.3)
    elif z_dim == 'annual_roi':
        pass

    xlim = (5, 50)
    ylim = (60, 240)
    for adx, alpha in enumerate(alphas):
        # x-axis, max_portfolio_size, y-axis:  window_sizes
        ax = fig.add_subplot(2, 5, adx + 1, xlim=xlim, ylim=ylim)

        ax.set_title(r'$\alpha$ = {:.0%}'.format(float(alpha)),
                     y=1.02, fontsize=18)
        # labelpad - number of points between the axis and its label
        ax.set_xlabel(r'$M$', fontsize=14, labelpad=-2,
                      fontname="Times New Roman")
        ax.set_ylabel(r'$h$', fontsize=14, labelpad=-2,
                      fontname="Times New Roman")
        ax.tick_params(labelsize=10, pad=1)
        ax.set_xticks(max_portfolio_sizes)
        ax.set_xticklabels(max_portfolio_sizes, fontsize=10,
                           fontname="Times New Roman")
        ax.set_yticks(window_sizes)
        ax.set_yticklabels(window_sizes, fontsize=10,
                           fontname="Times New Roman")

        Xs, Ys = np.meshgrid(max_portfolio_sizes, window_sizes)
        Zs = np.zeros_like(Xs, dtype=np.float)
        n_row, n_col = Xs.shape

        for rdx in range(n_row):
            for cdx in range(n_col):
                n_symbol, win_size = Xs[rdx, cdx], Ys[rdx, cdx]
                z_values = xarr.loc[
                    "{}_{}".format(start_date.strftime("%Y%m%d"),
                                   end_date.strftime("%Y%m%d")),
                    set_indices, n_symbol, win_size,
                    alpha, z_dim]
                mean = z_values.mean()
                Zs[rdx, cdx] = float(mean) * 100.

        print("Z_dim:", z_dim)
        print("z_range:", np.min(Zs), np.max(Zs))
        print(Zs)
        # contour, projecting on z
        cset = ax.contourf(Xs, Ys, Zs,
                           cmap=plt.cm.coolwarm,
                           norm=cm_norm,
                           levels=color_range)

    # share color bar,  rect [left, bottom, width, height]
    cbar_ax = fig.add_axes([0.92, 0.125, 0.015, 0.75])
    # print fig.get_axes()
    cbar = fig.colorbar(cset, ax=fig.get_axes(), cax=cbar_ax,
                        ticks=color_range)

    cbar.ax.tick_params(labelsize=12)
    if z_dim == "cum_roi":
        cbar_label_name = "Average cumulative returns (%)"
    elif z_dim == "daily_VSS":
        cbar_label_name = "Average daily VSS (%)"

    cbar.set_label(cbar_label_name, labelpad=1, size=20,
                   fontname="Times New Roman")

    plt.show()


def dissertation_plot_2d_contour_by_group(setting, z_dim="annual_roi"):
    """
    The  2 x 6 contour diagrams
    contour: x-axis: alpha, y-axis: rolling window size of a group
    common bar
    """

    # verify setting
    if setting not in ("compact", "general"):
        raise ValueError("unknown setting: {}".format(setting))

    # verify z_dim
    if z_dim not in ('cum_roi', 'daily_VSS', 'annual_roi'):
        raise ValueError('unknown z_dim:{}'.format(z_dim))

    # parameters
    start_date, end_date = dt.date(2005, 1, 3), dt.date(2018, 12, 28)
    interval = "{}_{}".format(start_date.strftime("%Y%m%d"),
                                end_date.strftime("%Y%m%d"))
    max_portfolio_sizes = (5,)
    window_sizes = range(50, 240 + 10, 10)
    # alpha
    alpha_pcts = [v for v in range(50, 100, 10)]
    # alphas = ["{:.2f}".format(v / 100.) for v in range(50, 100, 5)]
    set_indices = [1, ]
    # set_indices = [1, 2, 3]

    name = "report_SPSP_CVaR_whole_dissertation_{}_{}_{}.nc".format(
        setting, start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d"))

    # read report file
    xarr = xr.open_dataarray(os.path.join(pp.DATA_DIR, name))
    print(xarr)

    import matplotlib as mpl
    import matplotlib.pyplot as plt
    # set global font
    plt.rcParams['font.family'] = 'serif'
    plt.rcParams['font.serif'] = (['Times New Roman'] +
                                  plt.rcParams['font.serif'])

    # figure size in inches
    fig = plt.figure(figsize=(16, 12), facecolor='white')

    # set color range
    if z_dim == 'cum_roi':
        cm_norm = mpl.colors.Normalize(vmin=-10, vmax=600, clip=False)
        color_range = np.arange(-10, 580 + 10, 20)
    elif z_dim == "daily_VSS":
        cm_norm = mpl.colors.Normalize(vmin=0, vmax=4, clip=False)
        color_range = np.arange(0, 4 + 0.2, 0.3)
    elif z_dim == 'annual_roi':
        cm_norm = mpl.colors.Normalize(vmin=0, vmax=15, clip=False)
        color_range = np.arange(0, 15, 0.5)

    # alpha
    xlim = (50, 95)
    # rolling window size
    ylim = (50, 240)

    group_names = ['{}G{}'.format(mkt, idx+1)
                   for mkt in ['TW', 'US']
                   for idx in range(6)]

    for gdx, group_name in enumerate(group_names):
        # x-axis, alpha, y-axis:  window_sizes
        ax = fig.add_subplot(2, 6, gdx + 1, xlim=xlim, ylim=ylim)
        ax.set_title(group_name, y=1.02, fontsize=18)

        # labelpad - number of points between the axis and its label
        ax.set_xlabel(r'$\alpha$', fontsize=14, labelpad=-2)
        if group_name  in ('TWG1', 'USG1'):
            ax.set_ylabel(r'$h$', fontsize=14, labelpad=-2)
        ax.tick_params(labelsize=10, pad=1)
        ax.set_xticks(alpha_pcts)
        ax.set_xticklabels(alpha_pcts, fontsize=10)
        ax.set_yticks(window_sizes)
        ax.set_yticklabels(window_sizes, fontsize=10)

        # X: alpha_pcts, Y: window size
        Xs, Ys = np.meshgrid(alpha_pcts, window_sizes)
        Zs = np.zeros_like(Xs, dtype=np.float)
        n_row, n_col = Xs.shape

        # get z-value
        for rdx in range(n_row):
            for cdx in range(n_col):
                alpha, win_size = Xs[rdx, cdx], Ys[rdx, cdx]
                z_values = xarr.loc[
                    interval,
                    group_name,
                    set_indices,    # all scenarios
                    5,
                    win_size,
                    "{:.2f}".format(alpha/100.),
                    z_dim
                ]
                mean = z_values.mean()
                Zs[rdx, cdx] = float(mean) * 100.

        print(group_name, " z_range:", np.min(Zs), np.max(Zs))
        print(Zs)
        # contour, projecting on z
        cset = ax.contourf(Xs, Ys, Zs,
                           cmap=plt.cm.coolwarm,
                           norm=cm_norm,
                           levels=color_range)

    # share color bar, rect [left, bottom, width, height]
    cbar_ax = fig.add_axes([0.92, 0.125, 0.015, 0.75])
    # print fig.get_axes()
    cbar = fig.colorbar(cset, ax=fig.get_axes(), cax=cbar_ax,
                        ticks=color_range)

    cbar.ax.tick_params(labelsize=12)
    if z_dim == "cum_roi":
        cbar_label_name = "Average cumulative returns (%)"
    elif z_dim == "daily_VSS":
        cbar_label_name = "Average daily VSS (%)"
    elif z_dim == 'annual_roi':
        cbar_label_name = "Average annual returns (%)"

    cbar.set_label(cbar_label_name, labelpad=1, size=20)

    fig_path = os.path.join(pp.TMP_DIR,"{}.pdf".format(name))
    plt.savefig(fig_path, dpi=240, format='pdf')
    plt.show()


def dissertation_plot_contour_by_group_individual_bar(setting,
                                                      z_dim="annual_roi",
                                                      mkt='TW'):
    # verify setting
    if setting not in ("compact", "general"):
        raise ValueError("unknown setting: {}".format(setting))

    # verify z_dim
    if z_dim not in ('SPA_c', 'daily_VSS', 'annual_roi'):
        raise ValueError('unknown z_dim:{}'.format(z_dim))

    # parameters
    start_date, end_date = dt.date(2005, 1, 3), dt.date(2018, 12, 28)
    interval = "{}_{}".format(start_date.strftime("%Y%m%d"),
                              end_date.strftime("%Y%m%d"))

    max_portfolio_sizes = (5,)
    window_sizes = range(50, 240 + 10, 10)
    # alpha
    alpha_pcts = [v for v in range(50, 100, 5)]
    # alphas = ["{:.2f}".format(v / 100.) for v in range(50, 100, 5)]
    set_indices = [1, ]
    # set_indices = [1, 2, 3]

    name = "report_SPSP_CVaR_whole_dissertation_{}_{}_{}.nc".format(
        setting, start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d"))

    # read report file
    xarr = xr.open_dataarray(os.path.join(pp.DATA_DIR, name))
    print(xarr)

    import matplotlib as mpl
    import matplotlib.pyplot as plt
    # set global font
    plt.rcParams['font.family'] = 'serif'
    plt.rcParams['font.serif'] = (['Times New Roman'] +
                                  plt.rcParams['font.serif'])

    # figure size in inches
    fig = plt.figure(figsize=(16, 12), facecolor='white')

    # alpha
    xlim = (50, 95)
    # rolling window size
    ylim = (50, 240)

    group_names = ['{}G{}'.format(mkt, idx + 1) for idx in range(6)]
    for gdx, group_name in enumerate(group_names):
        # x-axis, alpha, y-axis:  window_sizes
        ax = fig.add_subplot(2, 3, gdx + 1, xlim=xlim, ylim=ylim)
        ax.set_title(group_name, y=1.02, fontsize=18)

        # labelpad - number of points between the axis and its label
        ax.set_xlabel(r'$\alpha$', fontsize=14, labelpad=-2)
        ax.set_ylabel(r'$h$', fontsize=14, labelpad=-2)
        ax.tick_params(labelsize=10, pad=1)
        ax.set_xticks(alpha_pcts)
        ax.set_xticklabels(alpha_pcts, fontsize=10)
        ax.set_yticks(window_sizes)
        ax.set_yticklabels(window_sizes, fontsize=10)

        # X: alpha_pcts, Y: window size
        Xs, Ys = np.meshgrid(alpha_pcts, window_sizes)
        Zs = np.zeros_like(Xs, dtype=np.float)
        n_row, n_col = Xs.shape

        # get z-value
        for rdx in range(n_row):
            for cdx in range(n_col):
                alpha, win_size = Xs[rdx, cdx], Ys[rdx, cdx]
                z_values = xarr.loc[
                    interval,
                    group_name,
                    set_indices,  # all scenarios
                    5,
                    win_size,
                    "{:.2f}".format(alpha / 100.),
                    z_dim
                ]
                mean = z_values.mean()
                Zs[rdx, cdx] = float(mean) * 100.


        # print(Zs)
        lower, high = np.floor(np.min(Zs)), np.ceil(np.max(Zs))
        print(group_name, " z_range:", lower, high)
        if z_dim == 'annual_roi':
            for _ in range(4):
                if (lower * 10) % 4:
                    lower -= 0.1
            for _ in range(4):
                if (high * 10) % 4:
                    high += 0.1
            print(group_name, "fixed z_range:", lower, high)
            cm_norm = mpl.colors.Normalize(
                vmin=lower - 0.1, vmax=high + 0.1, clip=False)
            color_range = np.arange(lower, high, 0.4)
        elif z_dim == 'daily_VSS':
            print('z_dim:', z_dim)
            cm_norm = mpl.colors.Normalize(
                vmin=lower - 0.1, vmax=high + 0.1, clip=False)
            color_range = np.arange(lower, high, 0.4)
        elif z_dim == 'SPA_c':
            print('z_dim:', z_dim)
            Zs[Zs > 10] = 11
            cm_norm = mpl.colors.Normalize(vmin=0, vmax=12, clip=False)
            color_range = np.arange(0, 12)

        # contour, projecting on z
        cset = ax.contourf(Xs, Ys, Zs,
                           cmap=plt.cm.coolwarm,
                           norm=cm_norm,
                           levels=color_range)
        # color bar

        if z_dim == 'annual_roi':
            cbar = fig.colorbar(cset, ax=ax)
            cbar.ax.tick_params(labelsize=12)
            cbar_label_name = "Annual return (%)"
        elif z_dim == 'daily_VSS':
            cbar = fig.colorbar(cset, ax=ax)
            cbar.ax.tick_params(labelsize=12)
            cbar_label_name = "Daily VSS (%)"
        elif z_dim == 'SPA_c':
            ticks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ">10"]
            cbar = fig.colorbar(cset, ax=ax, ticks=np.arange(12))
            cbar.ax.tick_params(labelsize=12)
            cbar_label_name = "SPA (%)"
            cbar.set_ticklabels(ticks)

        cbar.set_label(cbar_label_name, labelpad=1, size=18)

    fig_path = os.path.join(pp.TMP_DIR, "{}_{}.pdf".format(mkt, z_dim))
    plt.savefig(fig_path, dpi=240, format='pdf')
    plt.show()

def plot_yearly_2d_contour_by_alpha(setting, z_dim="cum_roi"):
    # verify setting
    if setting not in ("compact", "general"):
        raise ValueError("unknown setting: {}".format(setting))

    start_date, end_date = dt.date(2005, 1, 3), dt.date(2017, 12, 29)
    name = "report_SPSP_CVaR_yearly_{}_{}_{}.nc".format(
        setting, start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d"))

    # yearly interval
    years = [[dt.date(2005, 1, 3), dt.date(2005, 12, 30)],
             [dt.date(2006, 1, 2), dt.date(2006, 12, 29)],
             [dt.date(2007, 1, 2), dt.date(2007, 12, 31)],
             [dt.date(2008, 1, 2), dt.date(2008, 12, 31)],
             [dt.date(2009, 1, 5), dt.date(2009, 12, 31)],
             [dt.date(2010, 1, 4), dt.date(2010, 12, 31)],
             [dt.date(2011, 1, 3), dt.date(2011, 12, 30)],
             [dt.date(2012, 1, 2), dt.date(2012, 12, 28)],
             [dt.date(2013, 1, 2), dt.date(2013, 12, 31)],
             [dt.date(2014, 1, 2), dt.date(2014, 12, 31)],
             [dt.date(2015, 1, 5), dt.date(2015, 12, 31)],
             [dt.date(2016, 1, 4), dt.date(2016, 12, 30)],
             [dt.date(2017, 1, 3), dt.date(2017, 12, 29)]
             ]

    # read report file
    xarr = xr.open_dataarray(open(os.path.join(pp.DATA_DIR, name), 'rb'))

    # parameters
    max_portfolio_sizes = range(5, 50 + 5, 5)
    window_sizes = range(60, 240 + 10, 10)
    alphas = ["{:.2f}".format(v / 100.) for v in range(50, 100, 5)]
    set_indices = [1, 2, 3]

    import matplotlib as mpl
    import matplotlib.pyplot as plt

    for start, end in years:
        # figure size in inches
        fig = plt.figure(figsize=(64, 48), facecolor='white')
        fig.suptitle(
            'TAIEX_20050103_50largest_listed_market_cap {} {}-{}'.format(
                setting, start.strftime("%Y-%m-%d"), end.strftime("%Y-%m-%d")),
            fontsize=20)

        xlim = (5, 50)
        ylim = (60, 240)
        for adx, alpha in enumerate(alphas):
            # x-axis, max_portfolio_size, y-axis:  window_sizes
            ax = fig.add_subplot(2, 5, adx + 1, xlim=xlim, ylim=ylim)

            ax.set_title(r'$\alpha$ = {:.0%}'.format(float(alpha)),
                         y=1.02, fontsize=18)
            # labelpad - number of points between the axis and its label
            ax.set_xlabel(r'$M$', fontsize=14, labelpad=-2,
                          fontname="Times New Roman")
            ax.set_ylabel(r'$h$', fontsize=14, labelpad=-2,
                          fontname="Times New Roman")
            ax.tick_params(labelsize=10, pad=1)
            ax.set_xticks(max_portfolio_sizes)
            ax.set_xticklabels(max_portfolio_sizes, fontsize=10,
                               fontname="Times New Roman")
            ax.set_yticks(window_sizes)
            ax.set_yticklabels(window_sizes, fontsize=10,
                               fontname="Times New Roman")

            Xs, Ys = np.meshgrid(max_portfolio_sizes, window_sizes)
            Zs = np.zeros_like(Xs, dtype=np.float)
            n_row, n_col = Xs.shape

            for rdx in range(n_row):
                for cdx in range(n_col):
                    n_symbol, win_size = Xs[rdx, cdx], Ys[rdx, cdx]
                    z_values = xarr.loc[
                        "{}_{}".format(start.strftime("%Y%m%d"),
                                       end.strftime("%Y%m%d")),
                        set_indices, n_symbol, win_size,
                        alpha, z_dim]
                    mean = z_values.mean()
                    Zs[rdx, cdx] = float(mean) * 100.
                    # if Zs[rdx, cdx] > 10:
                    #     Zs[rdx, cdx] = 10.5

            print("Z_dim:", z_dim)
            print("z_range:", np.min(Zs), np.max(Zs))
            z_min = int(np.floor(np.min(Zs)))
            z_max = int(np.ceil(np.max(Zs)))

            # set color range
            if z_dim == 'cum_roi':
                cm_norm = mpl.colors.Normalize(vmin=z_min, vmax=z_max,
                                               clip=False)
                color_range = np.arange(z_min, z_max + 1)

            # contour, projecting on z
            cset = ax.contourf(Xs, Ys, Zs,
                               cmap=plt.cm.coolwarm,
                               norm=cm_norm,
                               levels=color_range)

        # share color bar,  rect [left, bottom, width, height]
        cbar_ax = fig.add_axes([0.92, 0.125, 0.015, 0.75])
        # print fig.get_axes()
        cbar = fig.colorbar(cset, ax=fig.get_axes(), cax=cbar_ax,
                            ticks=color_range)

        cbar.ax.tick_params(labelsize=12)
        if z_dim == "cum_roi":
            cbar_label_name = "Average cumulative returns (%)"
        elif z_dim == "daily_VSS":
            cbar_label_name = "Average daily VSS (%)"

        cbar.set_label(cbar_label_name, labelpad=1, size=20,
                       fontname="Times New Roman")
        fig_path = os.path.join(pp.TMP_DIR,
                                'SPSP_CVaR_cum_roi_yearly_{}_{}.png'.format(
                                    setting, start.year))
        fig.set_size_inches(16, 9)
        plt.savefig(fig_path, dpi=240, format='png')

    plt.show()


def get_spsp_cvar_report(report_dir=pp.DATA_DIR):
    import csv

    REPORT_FORMAT = "report_SPSP_CVaR_{setting}_{group_name}_Mc{n_symbol}_M{max_portfolio_size}_h{rolling_window_size}_s{n_scenario}_a{alpha}_sdx{sdx}_{exp_start_date}_{exp_end_date}.pkl"


    max_portfolio_sizes = [5, ]
    group_symbols = pp.GROUP_SYMBOLS
    window_sizes = range(50, 240 + 10, 10)
    n_scenarios = [1000, ]
    alphas = ["{:.2f}".format(v / 100.) for v in range(50, 100, 5)]
    years = [(dt.date(2005, 1, 3), dt.date(2018, 12, 28))]
    set_indices = [1, 2, 3]
    report_files = [
        REPORT_FORMAT.format(
            setting="compact",
            group_name=group_name,
            n_symbol=len(symbols),
            max_portfolio_size=m,
            rolling_window_size=h,
            n_scenario=s,
            alpha=a,
            sdx=sdx,
            exp_start_date=s_date.strftime("%Y%m%d"),
            exp_end_date=e_date.strftime("%Y%m%d")
        )
        for group_name, symbols in group_symbols.items()
        for m in max_portfolio_sizes
        for h in window_sizes
        for s in n_scenarios
        for a in alphas
        for sdx in set_indices
        for s_date, e_date in years
    ]

    group_names = pp.GROUP_SYMBOLS.keys()
    stat_file = os.path.join(pp.TMP_DIR, "spsp_cvar_stat.csv")
    with open(stat_file, "w", newline='') as csv_file:
        fields = [
            "simulation_name",
            "group_name",
            'rolling_window_size',
            'n_scenario',
            'alpha',
            'sdx',
            "start_date",
            "end_date",
            "n_data",
            "cum_roi",
            "annual_roi",
            "roi_mu",
            "std",
            "skew",
            "ex_kurt",
            "Sharpe",
            "Sortino_full",
            "Sortino_partial",
        ]

        writer = csv.DictWriter(csv_file, fieldnames=fields)
        writer.writeheader()

        for gdx, report_file in enumerate(report_files):
            rp = pd.read_pickle(os.path.join(pp.REPORT_DIR, report_file))
            params = rp["simulation_name"].split('_')
            writer.writerow(
                {
                    "simulation_name": rp["simulation_name"],
                    "group_name": rp['group_name'],
                    'rolling_window_size': rp['rolling_window_size'],
                    'n_scenario': params[7][1:],
                    'alpha': params[8][1:],
                    'sdx': params[9][-1],
                    "start_date": rp['exp_start_date'].strftime("%Y-%m-%d"),
                    "end_date": rp['exp_end_date'].strftime("%Y-%m-%d"),
                    "n_data": rp['n_exp_period'],
                    "cum_roi": rp['cum_roi'],
                    #"annual_roi": rp['annual_roi'],
                    "roi_mu": rp['daily_mean_roi'],
                    "std": rp['daily_std_roi'],
                    "skew": rp['daily_skew_roi'],
                    "ex_kurt": rp['daily_ex-kurt_roi'],
                    "Sharpe": rp['Sharpe'],
                    "Sortino_full": rp['Sortino_full'],
                    "Sortino_partial": rp['Sortino_partial']
                }
            )
            print(
                "[{}/{}] {}, cum_roi:{:.2%}".format(
                    gdx + 1, len(report_files), rp["simulation_name"],
                    rp['cum_roi']
                )
            )


if __name__ == '__main__':

    logging.basicConfig(
        stream=sys.stdout,
        format='%(filename)15s %(levelname)10s %(asctime)s\n'
               '%(message)s',
        datefmt='%Y%m%d-%H:%M:%S',
        level=logging.INFO)

    import argparse

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-e",
        "--exp_name",
        type=str,
        default="dissertation",
        choices=["dissertation", "stocksp_cor15"],
        help="name of the experiment",
    )

    parser.add_argument("--setting", type=str,
                        choices=("compact", "general"),
                        help="SPSP setting")

    parser.add_argument(
        "-g",
        "--group_name",
        type=str,
        help="name of the portfolio",
    )

    parser.add_argument("--yearly", type=int,
                        choices=range(2005, 2018 + 1),
                        help="yearly experiments")

    parser.add_argument("--symbol", type=str,
                        help="target symbol")

    parser.add_argument("-M", "--max_portfolio_size", type=int,
                        choices=list(range(5, 55, 5)) + [1, ],
                        help="max_portfolio_size")

    parser.add_argument("-w", "--rolling_window_size", type=int,
                        choices=range(1, 250),
                        help="rolling window size for estimating statistics.")

    parser.add_argument("-a", "--alpha", type=str,
                        choices=["{:.2f}".format(v / 100.)
                                 for v in range(50, 100, 5)],
                        help="confidence level of CVaR")

    parser.add_argument("--sdx", type=int,
                        choices=range(1, 4),
                        default=1,
                        help="pre-generated scenario set index.")

    parser.add_argument("-s", "--n_scenario", type=int,
                        choices=[200, 1000],
                        default=1000,
                        help="number of scenario")

    parser.add_argument("--stat", default=False,
                        action='store_true',
                        help="SPSP_cVaR experiment statistics")

    parser.add_argument("--plot", default=False,
                        action='store_true',
                        help="SPSP_cVaR experiment plot")

    args = parser.parse_args()

    print("run_SPSP_CVaR in single mode")

    if args.symbol:
        candidate_symbols = [args.symbol, ]
    else:
        candidate_symbols = json.load(
            open(pp.TAIEX_2005_MKT_CAP_50_SYMBOL_JSON))

    if args.stat:
        get_spsp_cvar_report()
        sys.exit()

    if args.plot:
        # dissertation_plot_2d_contour_by_group("compact", z_dim="annual_roi")
        dissertation_plot_contour_by_group_individual_bar(
            "compact", z_dim="daily_VSS", mkt='TW')
        sys.exit()

    if not args.yearly:
        run_SPSP_CVaR(
            args.exp_name,
            args.setting,
            args.group_name,
            args.max_portfolio_size,
            args.rolling_window_size,
            args.n_scenario,
            float(args.alpha),
            args.sdx,
            '20050103', '20181228',
            )
    else:
        years = {
            2005: (dt.date(2005, 1, 3), dt.date(2005, 12, 30)),
            2006: (dt.date(2006, 1, 2), dt.date(2006, 12, 29)),
            2007: (dt.date(2007, 1, 2), dt.date(2007, 12, 31)),
            2008: (dt.date(2008, 1, 2), dt.date(2008, 12, 31)),
            2009: (dt.date(2009, 1, 5), dt.date(2009, 12, 31)),
            2010: (dt.date(2010, 1, 4), dt.date(2010, 12, 31)),
            2011: (dt.date(2011, 1, 3), dt.date(2011, 12, 30)),
            2012: (dt.date(2012, 1, 2), dt.date(2012, 12, 28)),
            2013: (dt.date(2013, 1, 2), dt.date(2013, 12, 31)),
            2014: (dt.date(2014, 1, 2), dt.date(2014, 12, 31)),
            2015: (dt.date(2015, 1, 5), dt.date(2015, 12, 31)),
            2016: (dt.date(2016, 1, 4), dt.date(2016, 12, 30)),
            2017: (dt.date(2017, 1, 3), dt.date(2017, 12, 29))
        }

        run_SPSP_CVaR(
            args.exp_name,
            args.setting,
            args.group_name,
            args.max_portfolio_size,
            args.rolling_window_size,
            args.n_scenario,
            float(args.alpha),
            args.sdx,
            years[args.year][0],
            years[args.year][1]
        )
